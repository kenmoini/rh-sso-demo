kind: TemplateInstance
apiVersion: template.openshift.io/v1
metadata:
  name: redis-persistent-system
spec:
  template:
    metadata:
      name: redis-persistent
      namespace: openshift
      labels:
        samples.operator.openshift.io/managed: 'true'
      annotations:
        openshift.io/display-name: Redis
        openshift.io/documentation-url: 'https://github.com/sclorg/redis-container/tree/master/5'
        samples.operator.openshift.io/version: 4.8.9
        tags: 'database,redis'
        description: >-
          Redis in-memory data structure store, with persistent storage. For
          more information about using this template, including OpenShift
          considerations, see
          https://github.com/sclorg/redis-container/blob/master/5.


          NOTE: You must have persistent volumes available in your cluster to
          use this template.
        openshift.io/long-description: >-
          This template provides a standalone Redis server.  The data is stored
          on persistent storage.
        openshift.io/support-url: 'https://access.redhat.com'
        iconClass: icon-redis
        openshift.io/provider-display-name: 'Red Hat, Inc.'
    message: >-
      The following service(s) have been created in your project:
      ${DATABASE_SERVICE_NAME}.

             Password: ${REDIS_PASSWORD}
       Connection URL: redis://${DATABASE_SERVICE_NAME}:6379/

      For more information about using this template, including OpenShift
      considerations, see
      https://github.com/sclorg/redis-container/blob/master/5.
    objects:
      - apiVersion: v1
        kind: Secret
        metadata:
          annotations:
            template.openshift.io/expose-password: '{.data[''database-password'']}'
          name: '${DATABASE_SERVICE_NAME}-secret'
        stringData:
          database-password: '${REDIS_PASSWORD}'
      - apiVersion: v1
        kind: Service
        metadata:
          annotations:
            template.openshift.io/expose-uri: 'redis://{.spec.clusterIP}:{.spec.ports[?(.name=="redis")].port}'
          name: '${DATABASE_SERVICE_NAME}'
        spec:
          ports:
            - name: redis
              nodePort: 0
              port: 6379
              protocol: TCP
              targetPort: 6379
          selector:
            name: '${DATABASE_SERVICE_NAME}'
          sessionAffinity: None
          type: ClusterIP
        status:
          loadBalancer: {}
      - apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: '${DATABASE_SERVICE_NAME}'
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: '${VOLUME_CAPACITY}'
      - apiVersion: v1
        kind: DeploymentConfig
        metadata:
          annotations:
            template.alpha.openshift.io/wait-for-ready: 'true'
          name: '${DATABASE_SERVICE_NAME}'
          labels:
            app: redis-services
            app.kubernetes.io/part-of: redis-services
            component: redis
        spec:
          replicas: 1
          selector:
            name: '${DATABASE_SERVICE_NAME}'
          strategy:
            type: Recreate
          template:
            metadata:
              labels:
                name: '${DATABASE_SERVICE_NAME}'
            spec:
              containers:
                - resources:
                    limits:
                      memory: '${MEMORY_LIMIT}'
                  readinessProbe:
                    exec:
                      command:
                        - /bin/sh
                        - '-i'
                        - '-c'
                        - >-
                          test "$(redis-cli -h 127.0.0.1 -a $REDIS_PASSWORD
                          ping)" == "PONG"
                    initialDelaySeconds: 5
                    timeoutSeconds: 1
                  terminationMessagePath: /dev/termination-log
                  name: redis
                  livenessProbe:
                    initialDelaySeconds: 30
                    tcpSocket:
                      port: 6379
                    timeoutSeconds: 1
                  env:
                    - name: REDIS_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          key: database-password
                          name: '${DATABASE_SERVICE_NAME}-secret'
                  securityContext:
                    capabilities: {}
                    privileged: false
                  ports:
                    - containerPort: 6379
                      protocol: TCP
                  imagePullPolicy: IfNotPresent
                  volumeMounts:
                    - mountPath: /var/lib/redis/data
                      name: '${DATABASE_SERVICE_NAME}-data'
                  capabilities: {}
                  image: ' '
              dnsPolicy: ClusterFirst
              restartPolicy: Always
              volumes:
                - name: '${DATABASE_SERVICE_NAME}-data'
                  persistentVolumeClaim:
                    claimName: '${DATABASE_SERVICE_NAME}'
          triggers:
            - imageChangeParams:
                automatic: true
                containerNames:
                  - redis
                from:
                  kind: ImageStreamTag
                  name: 'redis:${REDIS_VERSION}'
                  namespace: '${NAMESPACE}'
                lastTriggeredImage: ''
              type: ImageChange
            - type: ConfigChange
        status: {}
    parameters:
      - name: MEMORY_LIMIT
        displayName: Memory Limit
        description: Maximum amount of memory the container can use.
        value: 512Mi
        required: true
      - name: NAMESPACE
        displayName: Namespace
        description: The OpenShift Namespace where the ImageStream resides.
        value: openshift
      - name: DATABASE_SERVICE_NAME
        displayName: Database Service Name
        description: The name of the OpenShift Service exposed for the database.
        value: redis-system
        required: true
      - name: REDIS_PASSWORD
        displayName: Redis Connection Password
        description: Password for the Redis connection user.
        generate: expression
        from: '[a-zA-Z0-9]{16}'
        required: true
      - name: VOLUME_CAPACITY
        displayName: Volume Capacity
        description: 'Volume space available for data, e.g. 512Mi, 2Gi.'
        value: 1Gi
        required: true
      - name: REDIS_VERSION
        displayName: Version of Redis Image
        description: 'Version of Redis image to be used (5-el7, 5-el8, or latest).'
        value: 5-el8
        required: true
    labels:
      template: redis-persistent-template
  secret:
    name: system-redis-persistent-parameters